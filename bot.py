# bot.py

import os
import requests
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û–°–ê–ì–û")],
        [KeyboardButton(text="‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã")],
        [KeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –û–°–ê–ì–û")],
        [KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –û–°–ê–ì–û")],
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —É—Å–ª—É–≥!", reply_markup=main_menu)


# --- –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°–ê–ì–û ---
@dp.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û–°–ê–ì–û")
async def prompt_vin(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ VIN-–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –û–°–ê–ì–û:")


@dp.message()
async def check_osago(message: Message):
    vin = message.text.strip().upper()

    if len(vin) != 17:
        await message.reply("‚ùó VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    url = f"https://service.api-assist.com/parser/osago_api/?key= {API_KEY}&vin={vin}"
    try:
        response = requests.get(url)
        data = response.json()

        if data.get("result"):
            result = data["result"]
            answer = (
                "‚úÖ –ü–æ–ª–∏—Å –û–°–ê–ì–û –Ω–∞–π–¥–µ–Ω:\n"
                f"–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä: {result.get('policyNumber', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è: {result.get('dateStart', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {result.get('dateEnd', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {result.get('insurerName', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
        else:
            answer = "‚ùå –ü–æ–ª–∏—Å –û–°–ê–ì–û –Ω–µ –Ω–∞–π–¥–µ–Ω."

    except Exception as e:
        answer = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –û–°–ê–ì–û: {e}"

    await message.reply(answer)


# --- –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ ---
@dp.message(F.text == "‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã")
async def prompt_fines(message: Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°328–û–ê39) –∏ –Ω–æ–º–µ—Ä –°–¢–° —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")


@dp.message(F.text.contains(" "))
async def check_fines(message: Message):
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 2:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∏ –°–¢–° —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    reg_number, sts = parts[0], parts[1]
    url = f"https://service.api-assist.com/parser/fines_api/?key= {API_KEY}&regNumber={reg_number}&sts={sts}"

    try:
        response = requests.get(url)
        data = response.json()

        if data.get("fines"):
            answer = "‚öñÔ∏è –ù–∞–π–¥–µ–Ω—ã —à—Ç—Ä–∞—Ñ—ã:\n"
            for fine in data["fines"]:
                answer += (
                    f"\n‚ñ´Ô∏è –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {fine.get('number')}\n"
                    f"‚ñ´Ô∏è –î–∞—Ç–∞: {fine.get('date')}\n"
                    f"‚ñ´Ô∏è –°—É–º–º–∞: {fine.get('sum')} —Ä—É–±.\n"
                    f"‚ñ´Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {fine.get('description')}\n"
                )
        elif data.get("message"):
            answer = f"‚ÑπÔ∏è {data['message']}"
        else:
            answer = "‚úÖ –®—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç"

    except Exception as e:
        answer = f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —à—Ç—Ä–∞—Ñ–æ–≤: {e}"

    await message.reply(answer)


# --- –ó–∞–≥–ª—É—à–∫–∞: –°–∫–∞—á–∞—Ç—å –û–°–ê–ì–û ---
@dp.message(F.text == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –û–°–ê–ì–û")
async def download_osago(message: Message):
    await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –≤–∞—à –ø–æ–ª–∏—Å –û–°–ê–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")


# --- –ó–∞–≥–ª—É—à–∫–∞: –û—Ñ–æ—Ä–º–∏—Ç—å –û–°–ê–ì–û ---
@dp.message(F.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –û–°–ê–ì–û")
async def create_osago(message: Message):
    await message.reply("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–ª–∏—Å –û–°–ê–ì–û:\nüîó https://example.com/osago-form ")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(dp.start_polling())
